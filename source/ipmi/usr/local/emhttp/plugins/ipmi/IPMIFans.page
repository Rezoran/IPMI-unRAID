Menu="IPMI:2"
Title="Fan Control"
Tag="thermometer"
Markdown="false"
Cond="exec(\"grep -o '^OVERRIDE=.enable' /boot/config/plugins/ipmi/ipmi.cfg 2>/dev/null\") || array_key_exists(trim(shell_exec(\"dmidecode -t 2 | grep 'Manufacturer' | awk -F 'r:' '{print $2}' | awk '{print $1}'\")), ['ASRock'=>'','ASRockRack'=>'','Dell'=>'','Supermicro'=>''])"
---

<div id="title" style="margin-top: -22px;">
    <span class="left"><i class="icon fa fa-thermometer"></i> Fan Control </span>
    <span class="status" style="margin-top: 50px;margin-left: -200px;">
    <img class="board-img" src=""></span>
    <span class="status" id="fanctrl-status">Fan Control: <?=$fanctrl_status;?></span>
</div>

<?if ($board_status !== false):?>

<form name="fanctrl_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="ipmi/fan.cfg" />
<input type="hidden" id="FANCMD" name="#command" value="" />

<dl>
    <dt>Motherboard and Model:</dt> 
    <dd> 
        <span><?=$board." ".$board_model." ".$sm_gen?></span>
    </dd>
</dl>
<dl>
    <dt>Fan Control:</dt>
    <dd>
        <select id="FANCONTROL" name="FANCONTROL" size="1" title="Enable fan control based on selected temperature sensors">
        <?=mk_option($fanctrl, 'disable', 'No')?>
        <?=mk_option($fanctrl, 'enable', 'Yes')?>
        </select>
    </dd>
</dl>
<blockquote class="inline_help">
    <p>Enable IPMI Fan Control daemon to run in the background.  It will also automatically start when system starts.</p>
</blockquote>
<dl>
    <dt>Temperature Polling Time:</dt>
    <dd>
        <select id="FANPOLL" class="fanctrl-run" name="FANPOLL" size="1" title="Amount of time between ipmi temperature checks">
        <?=mk_option($fanpoll, '1', '10 sec');?>
        <?=mk_option($fanpoll, '2', '20 sec');?>
        <?=mk_option($fanpoll, '3', '30 sec');?>
        <?=mk_option($fanpoll, '4', '40 sec');?>
        <?=mk_option($fanpoll, '5', '50 sec');?>
        <?=mk_option($fanpoll, '6', '1 min');?>
        <?=mk_option($fanpoll, '12', '2 min');?>
        <?=mk_option($fanpoll, '18', '3 min');?>
        <?=mk_option($fanpoll, '24', '4 min');?>
        <?=mk_option($fanpoll, '30', '5 min');?>
        <?=mk_option($fanpoll, '60', '10 min');?>
        <?=mk_option($fanpoll, '90', '15 min');?>
        <?=mk_option($fanpoll, '180', '30 min');?>
        </select>
    </dd>
</dl>
<blockquote class="inline_help">
    <p>Specify how long between checking the temperature sensors and executing fan speed changes.  Default is 3 minutes.</p>
</blockquote>

<dl>
    <dt>Hard Drive Polling Time:</dt>
    <dd>
        <select id="HDDPOLL" class="fanctrl-run" name="HDDPOLL" size="1" title="Amount of time between hard drive temperature checks">
        <?=mk_option($hddpoll, '6', '1 min');?>
        <?=mk_option($hddpoll, '12', '2 min');?>
        <?=mk_option($hddpoll, '18', '3 min');?>
        <?=mk_option($hddpoll, '24', '4 min');?>
        <?=mk_option($hddpoll, '30', '5 min');?>
        <?=mk_option($hddpoll, '60', '10 min');?>
        <?=mk_option($hddpoll, '90', '15 min');?>
        <?=mk_option($hddpoll, '180', '30 min');?>
        </select>
    </dd>
</dl>
<blockquote class="inline_help">
    <p>Specify how long between checking hard drive temperatures.  Default is 3 minutes.</p>
</blockquote>

<?if ($netsvc == 'enable'):?>

<dl>
    <dt>Fan Control IP Address:</dt>
    <dd>
        <select id="FANIP" class="fanctrl-run" name="FANIP" size="1" title="ip address of ipmi fan to control">
        <?get_fanip_options();?>
    </select>
    </dd>
</dl>
<blockquote class="inline_help">
    <p>If network connections are enabled, select which ipmi ip address to use for controlling fans. Only one system can be controlled.</p>
</blockquote>

<?endif;?>

&nbsp;

<dl>
    <dt><input id="FAN_DEFAULT" class="fanctrl-run" type="button" value="Default" title="loads the default values for fan control">
    <?if ($board === 'ASRock' || $board === 'ASRockRack'):?>
        <input id="btnConfig" class="fanctrl-run" type="button" value="Configure" title="tests your fans and determines their location for fan control">
    <?endif;?>
    </dt>
    <dd><input id="btnFANApply" type="submit" value="Apply"><input type="button" value="Done" onClick="done()"></dd>
</dl>
<blockquote class="inline_help">
    <p>'Default' loads the default values for fan control.</p>
    <p>'Configure' button tests your fans and determines their location for fan control. All fans will initially be set to full speed. Each location will be tested at one third speed to determine which fan is present. This will take about 1 min. On completion fans will return to auto. You can start fan control</p>
</blockquote>

</form>

<!-- Fan Settings -->

<div id="title"><span class="left"><i class="icon fa fa-cog"></i> Fan Settings </span></div>

    <span class="status" style="margin-top: 0px;"><input type="checkbox" id="advancedview"></span>

<form name="fanctrl_options" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="ipmi/fan.cfg" />

<div id="fanctrl-options">
<dl>
    <dt>&nbsp;</dt>
    <dd>&nbsp;</dd>
</dl>

<blockquote class="inline_help">
    <p><b>List all fans available for control and corresponding temperature sensors. Current speed and temperature values are shown. Fans are controlled linearly based on the temperature range from High to Low.</b></p>
    <p>Temperature sensor:  Sensor to monitor when determining fan speed.</p>
    <p>High temperature threshold (째C):  Highest temperature in the linear range to determine fan speed. Above this temperature fan with run at full speed.</p>
    <p>Low temperature threshold (째C):  Lowest temperature in the linear range to determine fan speed.  Below this temperature the fan will turn off unless minimum is set. </p>
    <p>Fan speed maximum (1-100%):  Select the highest value a fan can reach. Useful to keep a fan below a certain speed.</p>
    <p>Fan speed minimum (1-100%):  Select the lowest value a fan can reach. Useful to prevent fan from stopping or going below a certain rpm.</p>
    <p>HDD spundown temperature sensor:  Sensor to monitor when determining fan speed while HDD(s) are spundown.</p>
    <p><b>The following fields are only visible if a spundown temperature sensor is selected.</b></p>
    <p>High temperature threshold spundown (째C):  Highest temperature in the linear range to determine fan speed. Above this temperature fan with run at full speed.</p>
    <p>Low temperature threshold spundown (째C):  Lowest temperature in the linear range to determine fan speed.  Below this temperature the fan will turn off unless minimum is set. </p>
    <p>Fan speed maximum spundown (1-100%):  Select the highest value a fan can reach. Useful to keep a fan below a certain speed.</p>
    <p>Fan speed minimum spundown (1-100%):  Select the lowest value a fan can reach. Useful to prevent fan from stopping or going below a certain rpm.</p>
</blockquote>

    <dl>
        <dt>Hard Drives to Poll:</dt>
        <dd>
            <select multiple id="select-drives" title="Select hard drives that are polled for fan control">
                <option value="">Select All</option>
                <?=get_hdd_options($hddignore);?>
            </select>
        </dd>
        <input type="hidden" id="HDDIGNORE" name="HDDIGNORE" value="<?=htmlspecialchars($hddignore);?>" />

        <input type="hidden" id="select-drives-svc" name="HARDDRIVES" value="<?=htmlspecialchars($harddrives);?>">
    </dl>
    <blockquote class="inline_help">
        <p>Select Hard Drives to poll for HDD Temperature</p>
    </blockquote>

    &nbsp;

<?if ((($netsvc == 'disable') || (($netsvc == 'enable') && ($fanip != 'None')))):?>

    <?get_fanctrl_options();?>

<?endif;?>
</div>
&nbsp;

<dl>
    <dt>&nbsp;</dt>
    <dd><input type="submit" value="Apply"><input type="button" value="Done" onClick="done()"></dd>
</dl>

</form>

<div id="title" ><span class="left"><i class="icon fa fa-file"></i> Fan Control Log </span></div>
<table class="tablesorter fanlog" style="margin-top: 0px;">
    <thead>
        <th>Logfile</th>
        <th>Size</th>
        <th>Clear</th>
    </thead>
    <tbody>
<?
$log = '/var/log/ipmifan';
$version = parse_ini_file("/etc/unraid-version");
if(is_file($log)){
    if (version_compare($version['version'],"6.9.9", ">")) {	
		echo "<tr><td><a class='fanlog-a' id='fanlog-file' title='$log' onclick=\"openTerminal('log','ipmifan','ipmifan')\">$log</a></td><td id='fanlog-size'>"
        .filesize($log)."</td><td><a class='fanlog-a' id='fanlog-clear' ><i class='fa fa-trash' title='clear fan log'></i></a></td></tr>";
	} else {
		echo "<tr><td><a class='fanlog-a' id='fanlog-file' title='$log' onclick=\"openWindow('/webGui/scripts/tail_log&arg1=ipmifan','Fan Control Log Information',600,900);\">$log</a></td><td id='fanlog-size'>"
        .filesize($log)."</td><td><a class='fanlog-a' id='fanlog-clear' ><i class='fa fa-trash' title='clear fan log'></i></a></td></tr>";
    }
}
?>
    </tbody>
</table>
<?endif;?>

<script>
$(function(){
    <?if ($board_status !== false):?>

    initDriveDropdown(false);

    // check if board supports ipmi
    $('#tab2').click(function() {
        checkBoard();
        initDriveDropdown(true);
    });

    if($.cookie('one') == 'tab2')
        checkBoard();

    //advanced vBOARDiew switch set cookie and toggle advanced columns
    $('#advancedview').switchButton({
        labels_placement: 'left',
        on_label: 'Advanced View',
        off_label: 'Basic View',
        checked: ($.cookie('fanctrl_view_mode') == 'advanced')
    })
    .change(function () {
        //$('.fanctrl-settings').toggle('slow');
        $.cookie('fanctrl_view_mode', $('#advancedview')[0].checked ? 'advanced' : 'basic', { expires: 3650 });
        toggleFanCTRL();
    });

    toggleFanCTRL();

    // toggle auto disables settings
    $('.fanctrl-temp')
        .each(function() {
            var FanName = '.' + $(this).attr('name');
            $(FanName).prop('disabled', ($(this)[0].selectedIndex == 0));
        })
        .on('change', function() {
            var FanName = '.' + $(this).attr('name');
            $(FanName).prop('disabled', ($(this)[0].selectedIndex == 0));
        });

    $('#btnConfig').click(function() {
                openBox('/plugins/ipmi/scripts/ipmi2json', 'IPMI Fan Config', 600, 900, true);
    });

    $('#FAN_DEFAULT').click(resetFANDATA);
    $('#FANCONTROL').change(checkFANCTRL)
    checkFANCTRL();


    $('#fanlog-clear').on('click', clearFanLOG);

    <?endif;?>

    $('#readings').click(function() {
        $.cookie('one', 'tab1', { expires:null, path: '/'});
        location ='/Tools/IPMITools';
    });

});

<?if ($board_status !== false):?>

function resetFANDATA() {
    $('#FANCONTROL')[0].selectedIndex = 0;
    $('#FANPOLL')[0].selectedIndex = 5;
    $('#HDDPOLL')[0].selectedIndex = 2;
    $('#FANIP')[0].selectedIndex = 0;
    $('#fanctrl_settings').submit();
}

/* empty fan log */
function clearFanLOG() {
    $.get('/plugins/ipmi/include/fanlog_clear.php', {},function() {
        $('#fanlog-size').html('0');
    });
}

function initDriveDropdown(remove) {

    if (remove){
        $('#select-drives').dropdownchecklist('destroy');
    }
    DDCheckList('#select-drives','#HDDIGNORE');
}

function checkFANCTRL() {
    if ($('#FANCONTROL')[0].selectedIndex < 1 ) {
        $('#FANCMD').val('/usr/local/emhttp/plugins/ipmi/scripts/fanctrl_stop');
    }else {
        $('#FANCMD').val('/usr/local/emhttp/plugins/ipmi/scripts/fanctrl_start');
    }

    if ("<?=$fanctrl_run;?>" == true)
    {
        $('.fanctrl-run').prop('disabled', true);
        $('#btnFanApply').disabled = 'disabled';
    }else{
        $('.fanctrl-run').prop('disabled', false);
        $('#btnFanApply').prop('disabled', false);
    }
}

function checkBoard() {
    if ("<?=$board_file_status;?>" == false) {
       swal({title:'Fan Config JSON File Missing!',text:'You have not configured your fans yet. Stop Fan Control and Click the Configure button below to test your fans and determine their location for fan control. All fans will initially be set to full speed. Each location will be tested at one third speed to determine which fan is present. This will take about 1 min. On completion fans will return to auto and you can start fan control.',type:'warning',closeOnConfirm: true,},function() {
       });
    }
}

function toggleFanCTRL() {
    if ($.cookie('fanctrl_view_mode') == 'advanced') {
        $('.fanctrl-settings').show('slow');
        $('.fanctrl-basic').hide('slow');
    }else{
        $('.fanctrl-basic').show('slow');
        $('.fanctrl-settings').hide('slow');
    }
}
<?endif;?>
</script>
